# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."mariadb" = {
    image = "lscr.io/linuxserver/mariadb:latest";
    environmentFiles = [
      "/home/nixos/nextcloud/.env"
    ];
    volumes = [
      "/home/nixos/nextcloud/config/mariadb:/config:rw"
    ];
    ports = [
      "3306:3306/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--ip=172.18.0.3"
      "--network-alias=mariadb"
      "--network=nextcloud_mynetwork"
    ];
  };
  systemd.services."docker-mariadb" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-nextcloud_mynetwork.service"
    ];
    requires = [
      "docker-network-nextcloud_mynetwork.service"
    ];
    partOf = [
      "docker-compose-nextcloud-root.target"
    ];
    wantedBy = [
      "docker-compose-nextcloud-root.target"
    ];
  };
  virtualisation.oci-containers.containers."nextcloud" = {
    image = "lscr.io/linuxserver/nextcloud:latest";
    environmentFiles = [
      "/home/nixos/nextcloud/.env"
    ];
    volumes = [
      "/home/nixos/nextcloud/config/nextcloud:/config:rw"
      "/home/nixos/nextcloud_data:/data:rw"
    ];
    ports = [
      "443:443/tcp"
    ];
    dependsOn = [
      "mariadb"
    ];
    log-driver = "journald";
    extraOptions = [
      "--ip=172.18.0.2"
      "--network-alias=nextcloud"
      "--network=nextcloud_mynetwork"
    ];
  };
  systemd.services."docker-nextcloud" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-nextcloud_mynetwork.service"
    ];
    requires = [
      "docker-network-nextcloud_mynetwork.service"
    ];
    partOf = [
      "docker-compose-nextcloud-root.target"
    ];
    wantedBy = [
      "docker-compose-nextcloud-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-nextcloud_mynetwork" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f nextcloud_mynetwork";
    };
    script = ''
      docker network inspect nextcloud_mynetwork || docker network create nextcloud_mynetwork --driver=bridge --subnet=172.18.0.0/16
    '';
    partOf = [ "docker-compose-nextcloud-root.target" ];
    wantedBy = [ "docker-compose-nextcloud-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-nextcloud-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
