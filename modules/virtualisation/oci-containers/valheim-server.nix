# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  ...
}: {
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."valheim" = {
    image = "ghcr.io/lloesche/valheim-server";
    environmentFiles = [
      "/home/nixos/valheim/.env"
    ];
    volumes = [
      "/home/nixos/valheim/config:/config:rw"
      "/home/nixos/valheim/data:/opt/valheim:rw"
    ];
    ports = [
      "2456:2456/udp"
      "2457:2457/udp"
      "2458:2458/udp"
      "9001:9001/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=valheim"
      "--network=valheim_default"
    ];
  };
  systemd.services."docker-valheim" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-valheim_default.service"
    ];
    requires = [
      "docker-network-valheim_default.service"
    ];
    partOf = [
      "docker-compose-valheim-root.target"
    ];
    wantedBy = [
      "docker-compose-valheim-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-valheim_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f valheim_default";
    };
    script = ''
      docker network inspect valheim_default || docker network create valheim_default
    '';
    partOf = ["docker-compose-valheim-root.target"];
    wantedBy = ["docker-compose-valheim-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-valheim-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
  networking.firewall.allowedUDPPorts = [2456 2457 2458];
  networking.firewall.allowedTCPPorts = [9001];
}
